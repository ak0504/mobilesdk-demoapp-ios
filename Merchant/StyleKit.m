//
//  StyleKit.m
//  PaypointSDK
//
//  Created by Rob Nash on 22/04/2015.
//  Copyright (c) 2015 Paypoint. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKit.h"


@implementation StyleKit

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawFeedbackBubbleWithFrame: (CGRect)frame message: (NSString*)message
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* bubbleBlue = [UIColor colorWithRed: 0.18 green: 0.145 blue: 0.337 alpha: 1];
    UIColor* bubbleYellow = [UIColor colorWithRed: 0.961 green: 0.831 blue: 0.055 alpha: 1];

    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83276 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.14798 * CGRectGetHeight(frame))];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83276 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.71691 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 1.01534 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.30509 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 1.01534 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.55981 * CGRectGetHeight(frame))];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.39332 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.82375 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.71358 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81946 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.54607 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.85507 * CGRectGetHeight(frame))];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.15400 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.94472 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.29023 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.88527 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.15400 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.94472 * CGRectGetHeight(frame))];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21324 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.74878 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.15400 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.94472 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.19509 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.84346 * CGRectGetHeight(frame))];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.17157 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.71691 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.19881 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.73899 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.18489 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.72837 * CGRectGetHeight(frame))];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.16088 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15748 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + -0.00738 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.56293 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + -0.01094 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.31519 * CGRectGetHeight(frame))];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.17157 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.14798 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.16437 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15427 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.16793 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.15111 * CGRectGetHeight(frame))];
    [bezier2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.83276 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.14798 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.35415 * CGRectGetWidth(frame), CGRectGetMinY(frame) + -0.00913 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.65018 * CGRectGetWidth(frame), CGRectGetMinY(frame) + -0.00913 * CGRectGetHeight(frame))];
    [bezier2Path closePath];
    [bubbleYellow setFill];
    [bezier2Path fill];
    [bubbleBlue setStroke];
    bezier2Path.lineWidth = 8;
    [bezier2Path stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = UIBezierPath.bezierPath;
    [oval2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.52814 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.10166 * CGRectGetHeight(frame))];
    [oval2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.21247 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.20292 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.41512 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.09363 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.29894 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.12738 * CGRectGetHeight(frame))];
    [oval2Path addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.11700 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.33621 * CGRectGetHeight(frame)) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 0.16799 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.24178 * CGRectGetHeight(frame)) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 0.13616 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.28751 * CGRectGetHeight(frame))];
    oval2Path.lineCapStyle = kCGLineCapRound;

    [bubbleBlue setStroke];
    oval2Path.lineWidth = 8;
    [oval2Path stroke];


    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.23810 + 0.5), CGRectGetMinY(frame) + 37, floor(CGRectGetWidth(frame) * 0.87879 + 0.5) - floor(CGRectGetWidth(frame) * 0.23810 + 0.5), floor((CGRectGetHeight(frame) - 37) * 0.58025 + 0.5));
    NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    textStyle.alignment = NSTextAlignmentLeft;

    NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"FoundryContext-Regular" size: 14], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textStyle};

    CGFloat textTextHeight = [message boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, textRect);
    [message drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
    CGContextRestoreGState(context);
}

@end
